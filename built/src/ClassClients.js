"use strict";
//This file is generated by the build process
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = require("../index");
const _ = require("lodash");
var ClassClients;
(function (ClassClients) {
    class ClassClientBase {
        constructor(typeName, ...params) {
            this.typeName = typeName;
            if (_.isObject(params[0])) {
                this.client = params[0];
            }
            else {
                this.client = new index_1.Client(params[0], params[1]);
            }
        }
        /**
         * returns an array modified to have additional meta data on it containing the results
         */
        async query(type, query = {}, params = {}) {
            let resp = this.client.query(this.typeName, query, params);
            return resp;
        }
        async save(rallyObject, queryOptions = {}) {
            let resp = this.client.save(rallyObject, queryOptions);
            return resp;
        }
        /**
         * Returns a Rally object by ref or by type and ID
         */
        async get(typeOrRef, objectID = 0, params = {}) {
            let resp = this.client.get(typeOrRef, objectID, params);
            return resp;
        }
        /**
         * Gets a subcollection stored on the Rally object
         */
        async getCollection(rallyObject, collectionName, params = {}) {
            let resp = this.client.getCollection(rallyObject, collectionName, params);
            return resp;
        }
        /**
         *
         * @param  inputOrRef Either a Rally object or the ref for a Rally object
         * @param  params Optional Params to be sent with the request
         * @param  ignoreDelay Pass true if you don't want to wait 500 ms longer to return. This time gives the Rally server a chance to finish deleting
         */
        async delete(inputOrRef, params = {}, ignoreDelay = false) {
            return this.client.delete(inputOrRef, params, ignoreDelay);
        }
    }
    ClassClients.ClassClientBase = ClassClientBase;
    class AllowedAttributeValue extends ClassClientBase {
        constructor(...params) {
            const client = _.isObject(params[0]) ? params[0] : new index_1.Client(params[0], params[1]);
            super("AllowedAttributeValue", client);
        }
    }
    ClassClients.AllowedAttributeValue = AllowedAttributeValue;
    class AllowedQueryOperator extends ClassClientBase {
        constructor(...params) {
            const client = _.isObject(params[0]) ? params[0] : new index_1.Client(params[0], params[1]);
            super("AllowedQueryOperator", client);
        }
    }
    ClassClients.AllowedQueryOperator = AllowedQueryOperator;
    class App extends ClassClientBase {
        constructor(...params) {
            const client = _.isObject(params[0]) ? params[0] : new index_1.Client(params[0], params[1]);
            super("App", client);
        }
    }
    ClassClients.App = App;
    class Artifact extends ClassClientBase {
        constructor(...params) {
            const client = _.isObject(params[0]) ? params[0] : new index_1.Client(params[0], params[1]);
            super("Artifact", client);
        }
    }
    ClassClients.Artifact = Artifact;
    class ArtifactNotification extends ClassClientBase {
        constructor(...params) {
            const client = _.isObject(params[0]) ? params[0] : new index_1.Client(params[0], params[1]);
            super("ArtifactNotification", client);
        }
    }
    ClassClients.ArtifactNotification = ArtifactNotification;
    class Attachment extends ClassClientBase {
        constructor(...params) {
            const client = _.isObject(params[0]) ? params[0] : new index_1.Client(params[0], params[1]);
            super("Attachment", client);
        }
    }
    ClassClients.Attachment = Attachment;
    class AttachmentContent extends ClassClientBase {
        constructor(...params) {
            const client = _.isObject(params[0]) ? params[0] : new index_1.Client(params[0], params[1]);
            super("AttachmentContent", client);
        }
    }
    ClassClients.AttachmentContent = AttachmentContent;
    class AttributeDefinition extends ClassClientBase {
        constructor(...params) {
            const client = _.isObject(params[0]) ? params[0] : new index_1.Client(params[0], params[1]);
            super("AttributeDefinition", client);
        }
    }
    ClassClients.AttributeDefinition = AttributeDefinition;
    class Blocker extends ClassClientBase {
        constructor(...params) {
            const client = _.isObject(params[0]) ? params[0] : new index_1.Client(params[0], params[1]);
            super("Blocker", client);
        }
    }
    ClassClients.Blocker = Blocker;
    class Build extends ClassClientBase {
        constructor(...params) {
            const client = _.isObject(params[0]) ? params[0] : new index_1.Client(params[0], params[1]);
            super("Build", client);
        }
    }
    ClassClients.Build = Build;
    class BuildDefinition extends ClassClientBase {
        constructor(...params) {
            const client = _.isObject(params[0]) ? params[0] : new index_1.Client(params[0], params[1]);
            super("BuildDefinition", client);
        }
    }
    ClassClients.BuildDefinition = BuildDefinition;
    class Change extends ClassClientBase {
        constructor(...params) {
            const client = _.isObject(params[0]) ? params[0] : new index_1.Client(params[0], params[1]);
            super("Change", client);
        }
    }
    ClassClients.Change = Change;
    class Changeset extends ClassClientBase {
        constructor(...params) {
            const client = _.isObject(params[0]) ? params[0] : new index_1.Client(params[0], params[1]);
            super("Changeset", client);
        }
    }
    ClassClients.Changeset = Changeset;
    class Connection extends ClassClientBase {
        constructor(...params) {
            const client = _.isObject(params[0]) ? params[0] : new index_1.Client(params[0], params[1]);
            super("Connection", client);
        }
    }
    ClassClients.Connection = Connection;
    class ConversationPost extends ClassClientBase {
        constructor(...params) {
            const client = _.isObject(params[0]) ? params[0] : new index_1.Client(params[0], params[1]);
            super("ConversationPost", client);
        }
    }
    ClassClients.ConversationPost = ConversationPost;
    class CumulativeFlowData extends ClassClientBase {
        constructor(...params) {
            const client = _.isObject(params[0]) ? params[0] : new index_1.Client(params[0], params[1]);
            super("CumulativeFlowData", client);
        }
    }
    ClassClients.CumulativeFlowData = CumulativeFlowData;
    class Dashboard extends ClassClientBase {
        constructor(...params) {
            const client = _.isObject(params[0]) ? params[0] : new index_1.Client(params[0], params[1]);
            super("Dashboard", client);
        }
    }
    ClassClients.Dashboard = Dashboard;
    class DataMoveRequest extends ClassClientBase {
        constructor(...params) {
            const client = _.isObject(params[0]) ? params[0] : new index_1.Client(params[0], params[1]);
            super("DataMoveRequest", client);
        }
    }
    ClassClients.DataMoveRequest = DataMoveRequest;
    class Defect extends ClassClientBase {
        constructor(...params) {
            const client = _.isObject(params[0]) ? params[0] : new index_1.Client(params[0], params[1]);
            super("Defect", client);
        }
    }
    ClassClients.Defect = Defect;
    class DefectSuite extends ClassClientBase {
        constructor(...params) {
            const client = _.isObject(params[0]) ? params[0] : new index_1.Client(params[0], params[1]);
            super("DefectSuite", client);
        }
    }
    ClassClients.DefectSuite = DefectSuite;
    class DomainObject extends ClassClientBase {
        constructor(...params) {
            const client = _.isObject(params[0]) ? params[0] : new index_1.Client(params[0], params[1]);
            super("DomainObject", client);
        }
    }
    ClassClients.DomainObject = DomainObject;
    class Feature extends ClassClientBase {
        constructor(...params) {
            const client = _.isObject(params[0]) ? params[0] : new index_1.Client(params[0], params[1]);
            super("Feature", client);
        }
    }
    ClassClients.Feature = Feature;
    class FeatureToggleEntity extends ClassClientBase {
        constructor(...params) {
            const client = _.isObject(params[0]) ? params[0] : new index_1.Client(params[0], params[1]);
            super("FeatureToggleEntity", client);
        }
    }
    ClassClients.FeatureToggleEntity = FeatureToggleEntity;
    class FlowState extends ClassClientBase {
        constructor(...params) {
            const client = _.isObject(params[0]) ? params[0] : new index_1.Client(params[0], params[1]);
            super("FlowState", client);
        }
    }
    ClassClients.FlowState = FlowState;
    class HierarchicalRequirement extends ClassClientBase {
        constructor(...params) {
            const client = _.isObject(params[0]) ? params[0] : new index_1.Client(params[0], params[1]);
            super("HierarchicalRequirement", client);
        }
    }
    ClassClients.HierarchicalRequirement = HierarchicalRequirement;
    class HierarchicalRequirementPredecessorRelationship extends ClassClientBase {
        constructor(...params) {
            const client = _.isObject(params[0]) ? params[0] : new index_1.Client(params[0], params[1]);
            super("HierarchicalRequirementPredecessorRelationship", client);
        }
    }
    ClassClients.HierarchicalRequirementPredecessorRelationship = HierarchicalRequirementPredecessorRelationship;
    class Initiative extends ClassClientBase {
        constructor(...params) {
            const client = _.isObject(params[0]) ? params[0] : new index_1.Client(params[0], params[1]);
            super("Initiative", client);
        }
    }
    ClassClients.Initiative = Initiative;
    class Investment extends ClassClientBase {
        constructor(...params) {
            const client = _.isObject(params[0]) ? params[0] : new index_1.Client(params[0], params[1]);
            super("Investment", client);
        }
    }
    ClassClients.Investment = Investment;
    class Iteration extends ClassClientBase {
        constructor(...params) {
            const client = _.isObject(params[0]) ? params[0] : new index_1.Client(params[0], params[1]);
            super("Iteration", client);
        }
    }
    ClassClients.Iteration = Iteration;
    class IterationCumulativeFlowData extends ClassClientBase {
        constructor(...params) {
            const client = _.isObject(params[0]) ? params[0] : new index_1.Client(params[0], params[1]);
            super("IterationCumulativeFlowData", client);
        }
    }
    ClassClients.IterationCumulativeFlowData = IterationCumulativeFlowData;
    class Milestone extends ClassClientBase {
        constructor(...params) {
            const client = _.isObject(params[0]) ? params[0] : new index_1.Client(params[0], params[1]);
            super("Milestone", client);
        }
    }
    ClassClients.Milestone = Milestone;
    class PPMConnection extends ClassClientBase {
        constructor(...params) {
            const client = _.isObject(params[0]) ? params[0] : new index_1.Client(params[0], params[1]);
            super("PPMConnection", client);
        }
    }
    ClassClients.PPMConnection = PPMConnection;
    class Panel extends ClassClientBase {
        constructor(...params) {
            const client = _.isObject(params[0]) ? params[0] : new index_1.Client(params[0], params[1]);
            super("Panel", client);
        }
    }
    ClassClients.Panel = Panel;
    class PanelDefinitionConfigProperty extends ClassClientBase {
        constructor(...params) {
            const client = _.isObject(params[0]) ? params[0] : new index_1.Client(params[0], params[1]);
            super("PanelDefinitionConfigProperty", client);
        }
    }
    ClassClients.PanelDefinitionConfigProperty = PanelDefinitionConfigProperty;
    class PersistableObject extends ClassClientBase {
        constructor(...params) {
            const client = _.isObject(params[0]) ? params[0] : new index_1.Client(params[0], params[1]);
            super("PersistableObject", client);
        }
    }
    ClassClients.PersistableObject = PersistableObject;
    class PortfolioItem extends ClassClientBase {
        constructor(...params) {
            const client = _.isObject(params[0]) ? params[0] : new index_1.Client(params[0], params[1]);
            super("PortfolioItem", client);
        }
    }
    ClassClients.PortfolioItem = PortfolioItem;
    class PortfolioItemPredecessorRelationship extends ClassClientBase {
        constructor(...params) {
            const client = _.isObject(params[0]) ? params[0] : new index_1.Client(params[0], params[1]);
            super("PortfolioItemPredecessorRelationship", client);
        }
    }
    ClassClients.PortfolioItemPredecessorRelationship = PortfolioItemPredecessorRelationship;
    class Preference extends ClassClientBase {
        constructor(...params) {
            const client = _.isObject(params[0]) ? params[0] : new index_1.Client(params[0], params[1]);
            super("Preference", client);
        }
    }
    ClassClients.Preference = Preference;
    class PreliminaryEstimate extends ClassClientBase {
        constructor(...params) {
            const client = _.isObject(params[0]) ? params[0] : new index_1.Client(params[0], params[1]);
            super("PreliminaryEstimate", client);
        }
    }
    ClassClients.PreliminaryEstimate = PreliminaryEstimate;
    class ProfileImage extends ClassClientBase {
        constructor(...params) {
            const client = _.isObject(params[0]) ? params[0] : new index_1.Client(params[0], params[1]);
            super("ProfileImage", client);
        }
    }
    ClassClients.ProfileImage = ProfileImage;
    class Project extends ClassClientBase {
        constructor(...params) {
            const client = _.isObject(params[0]) ? params[0] : new index_1.Client(params[0], params[1]);
            super("Project", client);
        }
    }
    ClassClients.Project = Project;
    class ProjectPermission extends ClassClientBase {
        constructor(...params) {
            const client = _.isObject(params[0]) ? params[0] : new index_1.Client(params[0], params[1]);
            super("ProjectPermission", client);
        }
    }
    ClassClients.ProjectPermission = ProjectPermission;
    class PullRequest extends ClassClientBase {
        constructor(...params) {
            const client = _.isObject(params[0]) ? params[0] : new index_1.Client(params[0], params[1]);
            super("PullRequest", client);
        }
    }
    ClassClients.PullRequest = PullRequest;
    class RankableArtifact extends ClassClientBase {
        constructor(...params) {
            const client = _.isObject(params[0]) ? params[0] : new index_1.Client(params[0], params[1]);
            super("RankableArtifact", client);
        }
    }
    ClassClients.RankableArtifact = RankableArtifact;
    class RecycleBinEntry extends ClassClientBase {
        constructor(...params) {
            const client = _.isObject(params[0]) ? params[0] : new index_1.Client(params[0], params[1]);
            super("RecycleBinEntry", client);
        }
    }
    ClassClients.RecycleBinEntry = RecycleBinEntry;
    class Release extends ClassClientBase {
        constructor(...params) {
            const client = _.isObject(params[0]) ? params[0] : new index_1.Client(params[0], params[1]);
            super("Release", client);
        }
    }
    ClassClients.Release = Release;
    class ReleaseCumulativeFlowData extends ClassClientBase {
        constructor(...params) {
            const client = _.isObject(params[0]) ? params[0] : new index_1.Client(params[0], params[1]);
            super("ReleaseCumulativeFlowData", client);
        }
    }
    ClassClients.ReleaseCumulativeFlowData = ReleaseCumulativeFlowData;
    class Requirement extends ClassClientBase {
        constructor(...params) {
            const client = _.isObject(params[0]) ? params[0] : new index_1.Client(params[0], params[1]);
            super("Requirement", client);
        }
    }
    ClassClients.Requirement = Requirement;
    class Revision extends ClassClientBase {
        constructor(...params) {
            const client = _.isObject(params[0]) ? params[0] : new index_1.Client(params[0], params[1]);
            super("Revision", client);
        }
    }
    ClassClients.Revision = Revision;
    class RevisionHistory extends ClassClientBase {
        constructor(...params) {
            const client = _.isObject(params[0]) ? params[0] : new index_1.Client(params[0], params[1]);
            super("RevisionHistory", client);
        }
    }
    ClassClients.RevisionHistory = RevisionHistory;
    class Risk extends ClassClientBase {
        constructor(...params) {
            const client = _.isObject(params[0]) ? params[0] : new index_1.Client(params[0], params[1]);
            super("Risk", client);
        }
    }
    ClassClients.Risk = Risk;
    class SCMRepository extends ClassClientBase {
        constructor(...params) {
            const client = _.isObject(params[0]) ? params[0] : new index_1.Client(params[0], params[1]);
            super("SCMRepository", client);
        }
    }
    ClassClients.SCMRepository = SCMRepository;
    class SchedulableArtifact extends ClassClientBase {
        constructor(...params) {
            const client = _.isObject(params[0]) ? params[0] : new index_1.Client(params[0], params[1]);
            super("SchedulableArtifact", client);
        }
    }
    ClassClients.SchedulableArtifact = SchedulableArtifact;
    class ScheduledTestCase extends ClassClientBase {
        constructor(...params) {
            const client = _.isObject(params[0]) ? params[0] : new index_1.Client(params[0], params[1]);
            super("ScheduledTestCase", client);
        }
    }
    ClassClients.ScheduledTestCase = ScheduledTestCase;
    class Scope extends ClassClientBase {
        constructor(...params) {
            const client = _.isObject(params[0]) ? params[0] : new index_1.Client(params[0], params[1]);
            super("Scope", client);
        }
    }
    ClassClients.Scope = Scope;
    class ScopedAttributeDefinition extends ClassClientBase {
        constructor(...params) {
            const client = _.isObject(params[0]) ? params[0] : new index_1.Client(params[0], params[1]);
            super("ScopedAttributeDefinition", client);
        }
    }
    ClassClients.ScopedAttributeDefinition = ScopedAttributeDefinition;
    class Slice extends ClassClientBase {
        constructor(...params) {
            const client = _.isObject(params[0]) ? params[0] : new index_1.Client(params[0], params[1]);
            super("Slice", client);
        }
    }
    ClassClients.Slice = Slice;
    class State extends ClassClientBase {
        constructor(...params) {
            const client = _.isObject(params[0]) ? params[0] : new index_1.Client(params[0], params[1]);
            super("State", client);
        }
    }
    ClassClients.State = State;
    class Subscription extends ClassClientBase {
        constructor(...params) {
            const client = _.isObject(params[0]) ? params[0] : new index_1.Client(params[0], params[1]);
            super("Subscription", client);
        }
    }
    ClassClients.Subscription = Subscription;
    class SubscriptionTag extends ClassClientBase {
        constructor(...params) {
            const client = _.isObject(params[0]) ? params[0] : new index_1.Client(params[0], params[1]);
            super("SubscriptionTag", client);
        }
    }
    ClassClients.SubscriptionTag = SubscriptionTag;
    class Tag extends ClassClientBase {
        constructor(...params) {
            const client = _.isObject(params[0]) ? params[0] : new index_1.Client(params[0], params[1]);
            super("Tag", client);
        }
    }
    ClassClients.Tag = Tag;
    class Task extends ClassClientBase {
        constructor(...params) {
            const client = _.isObject(params[0]) ? params[0] : new index_1.Client(params[0], params[1]);
            super("Task", client);
        }
    }
    ClassClients.Task = Task;
    class TestCase extends ClassClientBase {
        constructor(...params) {
            const client = _.isObject(params[0]) ? params[0] : new index_1.Client(params[0], params[1]);
            super("TestCase", client);
        }
    }
    ClassClients.TestCase = TestCase;
    class TestCaseResult extends ClassClientBase {
        constructor(...params) {
            const client = _.isObject(params[0]) ? params[0] : new index_1.Client(params[0], params[1]);
            super("TestCaseResult", client);
        }
    }
    ClassClients.TestCaseResult = TestCaseResult;
    class TestCaseStep extends ClassClientBase {
        constructor(...params) {
            const client = _.isObject(params[0]) ? params[0] : new index_1.Client(params[0], params[1]);
            super("TestCaseStep", client);
        }
    }
    ClassClients.TestCaseStep = TestCaseStep;
    class TestFolder extends ClassClientBase {
        constructor(...params) {
            const client = _.isObject(params[0]) ? params[0] : new index_1.Client(params[0], params[1]);
            super("TestFolder", client);
        }
    }
    ClassClients.TestFolder = TestFolder;
    class TestFolderStatus extends ClassClientBase {
        constructor(...params) {
            const client = _.isObject(params[0]) ? params[0] : new index_1.Client(params[0], params[1]);
            super("TestFolderStatus", client);
        }
    }
    ClassClients.TestFolderStatus = TestFolderStatus;
    class TestSet extends ClassClientBase {
        constructor(...params) {
            const client = _.isObject(params[0]) ? params[0] : new index_1.Client(params[0], params[1]);
            super("TestSet", client);
        }
    }
    ClassClients.TestSet = TestSet;
    class TimeEntryItem extends ClassClientBase {
        constructor(...params) {
            const client = _.isObject(params[0]) ? params[0] : new index_1.Client(params[0], params[1]);
            super("TimeEntryItem", client);
        }
    }
    ClassClients.TimeEntryItem = TimeEntryItem;
    class TimeEntryValue extends ClassClientBase {
        constructor(...params) {
            const client = _.isObject(params[0]) ? params[0] : new index_1.Client(params[0], params[1]);
            super("TimeEntryValue", client);
        }
    }
    ClassClients.TimeEntryValue = TimeEntryValue;
    class TypeDefinition extends ClassClientBase {
        constructor(...params) {
            const client = _.isObject(params[0]) ? params[0] : new index_1.Client(params[0], params[1]);
            super("TypeDefinition", client);
        }
    }
    ClassClients.TypeDefinition = TypeDefinition;
    class User extends ClassClientBase {
        constructor(...params) {
            const client = _.isObject(params[0]) ? params[0] : new index_1.Client(params[0], params[1]);
            super("User", client);
        }
    }
    ClassClients.User = User;
    class UserIterationCapacity extends ClassClientBase {
        constructor(...params) {
            const client = _.isObject(params[0]) ? params[0] : new index_1.Client(params[0], params[1]);
            super("UserIterationCapacity", client);
        }
    }
    ClassClients.UserIterationCapacity = UserIterationCapacity;
    class UserPermission extends ClassClientBase {
        constructor(...params) {
            const client = _.isObject(params[0]) ? params[0] : new index_1.Client(params[0], params[1]);
            super("UserPermission", client);
        }
    }
    ClassClients.UserPermission = UserPermission;
    class UserProfile extends ClassClientBase {
        constructor(...params) {
            const client = _.isObject(params[0]) ? params[0] : new index_1.Client(params[0], params[1]);
            super("UserProfile", client);
        }
    }
    ClassClients.UserProfile = UserProfile;
    class WebLinkDefinition extends ClassClientBase {
        constructor(...params) {
            const client = _.isObject(params[0]) ? params[0] : new index_1.Client(params[0], params[1]);
            super("WebLinkDefinition", client);
        }
    }
    ClassClients.WebLinkDefinition = WebLinkDefinition;
    class WebTab extends ClassClientBase {
        constructor(...params) {
            const client = _.isObject(params[0]) ? params[0] : new index_1.Client(params[0], params[1]);
            super("WebTab", client);
        }
    }
    ClassClients.WebTab = WebTab;
    class Workspace extends ClassClientBase {
        constructor(...params) {
            const client = _.isObject(params[0]) ? params[0] : new index_1.Client(params[0], params[1]);
            super("Workspace", client);
        }
    }
    ClassClients.Workspace = Workspace;
    class WorkspaceConfiguration extends ClassClientBase {
        constructor(...params) {
            const client = _.isObject(params[0]) ? params[0] : new index_1.Client(params[0], params[1]);
            super("WorkspaceConfiguration", client);
        }
    }
    ClassClients.WorkspaceConfiguration = WorkspaceConfiguration;
    class WorkspaceDomainObject extends ClassClientBase {
        constructor(...params) {
            const client = _.isObject(params[0]) ? params[0] : new index_1.Client(params[0], params[1]);
            super("WorkspaceDomainObject", client);
        }
    }
    ClassClients.WorkspaceDomainObject = WorkspaceDomainObject;
    class WorkspacePermission extends ClassClientBase {
        constructor(...params) {
            const client = _.isObject(params[0]) ? params[0] : new index_1.Client(params[0], params[1]);
            super("WorkspacePermission", client);
        }
    }
    ClassClients.WorkspacePermission = WorkspacePermission;
})(ClassClients = exports.ClassClients || (exports.ClassClients = {}));
//# sourceMappingURL=ClassClients.js.map