
    //This file is generated by the build process
    
import { Client, Api, Classes } from './index';
import _ = require('lodash');

export namespace ClassClients {
    export class ClassClientBase<T extends Api.RallyObject> {
        constructor(typeName: string, apiKey: string, options: Api.ClientOptions)
        constructor(typeName: string,client: Client)
        constructor(typeName: string, ...params: any[]) {
            this.typeName = typeName;            
            if(_.isObject(params[0])){
                this.client = params[0];
            }
            else{
                this.client = new Client(params[0],params[1]);
            }
        }
        /**
         * @private
         */
        client: Client
        /**
         * @private
         */
        typeName: string
        /**
         * returns an array modified to have additional meta data on it containing the results
         */
        async query(type, query: Api.QueryOptions = {}, params = {}):
            Promise<Api.QueryResponse> {
            return this.client.query(this.typeName, query, params);
        }

        /**
         * Saves the current state of the Rally object to Rally.
         * Creating a new object on the server if no _ref is provided in rallyObject
         * @param rallyObject A new or existing Rally object
         */
        async save(rallyObject: Partial<T>): Promise<T>
        async save(
            rallyObject: Partial<T>,
            queryOptions: Api.QueryOptions = {}
        ): Promise<T> {
            let resp: any =  this.client.save(rallyObject, queryOptions);
            return resp;
        }

        /**
         * Returns a Rally object by ref or by type and ID
         */
        async get(typeOrRef: string, objectID = 0, params: Api.QueryOptions = {}): Promise<T> {
            let resp: any = this.client.get(typeOrRef, objectID, params);
            return resp;
        }

        /**
         * Gets a subcollection stored on the Rally object
         */
        async getCollection(rallyObject: T, collectionName: string, params: Api.QueryOptions = {}): Promise<Api.QueryResponse> {
            return this.client.getCollection(rallyObject, collectionName, params);
        }

        /**
         * 
         * @param  inputOrRef Either a Rally object or the ref for a Rally object
         * @param  params Optional Params to be sent with the request
         * @param  ignoreDelay Pass true if you don't want to wait 500 ms longer to return. This time gives the Rally server a chance to finish deleting
         */
        async delete(inputOrRef: string | Api.RallyObject, params = {}, ignoreDelay = false) {
            return this.client.delete(inputOrRef, params, ignoreDelay);
        }
    }


    
    export class AllowedAttributeValue extends ClassClientBase<Classes.AllowedAttributeValue> {
        constructor(apiKey: string, options: Api.ClientOptions)
        constructor(client: Client)
        constructor(...params: any[]) {
            const client = _.isObject(params[0])?params[0]:new Client(params[0],params[1]);
            super("AllowedAttributeValue",client);                
        }
    }
         
    export class AllowedQueryOperator extends ClassClientBase<Classes.AllowedQueryOperator> {
        constructor(apiKey: string, options: Api.ClientOptions)
        constructor(client: Client)
        constructor(...params: any[]) {
            const client = _.isObject(params[0])?params[0]:new Client(params[0],params[1]);
            super("AllowedQueryOperator",client);                
        }
    }
         
    export class App extends ClassClientBase<Classes.App> {
        constructor(apiKey: string, options: Api.ClientOptions)
        constructor(client: Client)
        constructor(...params: any[]) {
            const client = _.isObject(params[0])?params[0]:new Client(params[0],params[1]);
            super("App",client);                
        }
    }
         
    export class Artifact extends ClassClientBase<Classes.Artifact> {
        constructor(apiKey: string, options: Api.ClientOptions)
        constructor(client: Client)
        constructor(...params: any[]) {
            const client = _.isObject(params[0])?params[0]:new Client(params[0],params[1]);
            super("Artifact",client);                
        }
    }
         
    export class ArtifactNotification extends ClassClientBase<Classes.ArtifactNotification> {
        constructor(apiKey: string, options: Api.ClientOptions)
        constructor(client: Client)
        constructor(...params: any[]) {
            const client = _.isObject(params[0])?params[0]:new Client(params[0],params[1]);
            super("ArtifactNotification",client);                
        }
    }
         
    export class Attachment extends ClassClientBase<Classes.Attachment> {
        constructor(apiKey: string, options: Api.ClientOptions)
        constructor(client: Client)
        constructor(...params: any[]) {
            const client = _.isObject(params[0])?params[0]:new Client(params[0],params[1]);
            super("Attachment",client);                
        }
    }
         
    export class AttachmentContent extends ClassClientBase<Classes.AttachmentContent> {
        constructor(apiKey: string, options: Api.ClientOptions)
        constructor(client: Client)
        constructor(...params: any[]) {
            const client = _.isObject(params[0])?params[0]:new Client(params[0],params[1]);
            super("AttachmentContent",client);                
        }
    }
         
    export class AttributeDefinition extends ClassClientBase<Classes.AttributeDefinition> {
        constructor(apiKey: string, options: Api.ClientOptions)
        constructor(client: Client)
        constructor(...params: any[]) {
            const client = _.isObject(params[0])?params[0]:new Client(params[0],params[1]);
            super("AttributeDefinition",client);                
        }
    }
         
    export class Blocker extends ClassClientBase<Classes.Blocker> {
        constructor(apiKey: string, options: Api.ClientOptions)
        constructor(client: Client)
        constructor(...params: any[]) {
            const client = _.isObject(params[0])?params[0]:new Client(params[0],params[1]);
            super("Blocker",client);                
        }
    }
         
    export class Build extends ClassClientBase<Classes.Build> {
        constructor(apiKey: string, options: Api.ClientOptions)
        constructor(client: Client)
        constructor(...params: any[]) {
            const client = _.isObject(params[0])?params[0]:new Client(params[0],params[1]);
            super("Build",client);                
        }
    }
         
    export class BuildDefinition extends ClassClientBase<Classes.BuildDefinition> {
        constructor(apiKey: string, options: Api.ClientOptions)
        constructor(client: Client)
        constructor(...params: any[]) {
            const client = _.isObject(params[0])?params[0]:new Client(params[0],params[1]);
            super("BuildDefinition",client);                
        }
    }
         
    export class Change extends ClassClientBase<Classes.Change> {
        constructor(apiKey: string, options: Api.ClientOptions)
        constructor(client: Client)
        constructor(...params: any[]) {
            const client = _.isObject(params[0])?params[0]:new Client(params[0],params[1]);
            super("Change",client);                
        }
    }
         
    export class Changeset extends ClassClientBase<Classes.Changeset> {
        constructor(apiKey: string, options: Api.ClientOptions)
        constructor(client: Client)
        constructor(...params: any[]) {
            const client = _.isObject(params[0])?params[0]:new Client(params[0],params[1]);
            super("Changeset",client);                
        }
    }
         
    export class Connection extends ClassClientBase<Classes.Connection> {
        constructor(apiKey: string, options: Api.ClientOptions)
        constructor(client: Client)
        constructor(...params: any[]) {
            const client = _.isObject(params[0])?params[0]:new Client(params[0],params[1]);
            super("Connection",client);                
        }
    }
         
    export class ConversationPost extends ClassClientBase<Classes.ConversationPost> {
        constructor(apiKey: string, options: Api.ClientOptions)
        constructor(client: Client)
        constructor(...params: any[]) {
            const client = _.isObject(params[0])?params[0]:new Client(params[0],params[1]);
            super("ConversationPost",client);                
        }
    }
         
    export class CumulativeFlowData extends ClassClientBase<Classes.CumulativeFlowData> {
        constructor(apiKey: string, options: Api.ClientOptions)
        constructor(client: Client)
        constructor(...params: any[]) {
            const client = _.isObject(params[0])?params[0]:new Client(params[0],params[1]);
            super("CumulativeFlowData",client);                
        }
    }
         
    export class Dashboard extends ClassClientBase<Classes.Dashboard> {
        constructor(apiKey: string, options: Api.ClientOptions)
        constructor(client: Client)
        constructor(...params: any[]) {
            const client = _.isObject(params[0])?params[0]:new Client(params[0],params[1]);
            super("Dashboard",client);                
        }
    }
         
    export class DataMoveRequest extends ClassClientBase<Classes.DataMoveRequest> {
        constructor(apiKey: string, options: Api.ClientOptions)
        constructor(client: Client)
        constructor(...params: any[]) {
            const client = _.isObject(params[0])?params[0]:new Client(params[0],params[1]);
            super("DataMoveRequest",client);                
        }
    }
         
    export class Defect extends ClassClientBase<Classes.Defect> {
        constructor(apiKey: string, options: Api.ClientOptions)
        constructor(client: Client)
        constructor(...params: any[]) {
            const client = _.isObject(params[0])?params[0]:new Client(params[0],params[1]);
            super("Defect",client);                
        }
    }
         
    export class DefectSuite extends ClassClientBase<Classes.DefectSuite> {
        constructor(apiKey: string, options: Api.ClientOptions)
        constructor(client: Client)
        constructor(...params: any[]) {
            const client = _.isObject(params[0])?params[0]:new Client(params[0],params[1]);
            super("DefectSuite",client);                
        }
    }
         
    export class DomainObject extends ClassClientBase<Classes.DomainObject> {
        constructor(apiKey: string, options: Api.ClientOptions)
        constructor(client: Client)
        constructor(...params: any[]) {
            const client = _.isObject(params[0])?params[0]:new Client(params[0],params[1]);
            super("DomainObject",client);                
        }
    }
         
    export class Feature extends ClassClientBase<Classes.Feature> {
        constructor(apiKey: string, options: Api.ClientOptions)
        constructor(client: Client)
        constructor(...params: any[]) {
            const client = _.isObject(params[0])?params[0]:new Client(params[0],params[1]);
            super("Feature",client);                
        }
    }
         
    export class FeatureToggleEntity extends ClassClientBase<Classes.FeatureToggleEntity> {
        constructor(apiKey: string, options: Api.ClientOptions)
        constructor(client: Client)
        constructor(...params: any[]) {
            const client = _.isObject(params[0])?params[0]:new Client(params[0],params[1]);
            super("FeatureToggleEntity",client);                
        }
    }
         
    export class FlowState extends ClassClientBase<Classes.FlowState> {
        constructor(apiKey: string, options: Api.ClientOptions)
        constructor(client: Client)
        constructor(...params: any[]) {
            const client = _.isObject(params[0])?params[0]:new Client(params[0],params[1]);
            super("FlowState",client);                
        }
    }
         
    export class FundingIncrement extends ClassClientBase<Classes.FundingIncrement> {
        constructor(apiKey: string, options: Api.ClientOptions)
        constructor(client: Client)
        constructor(...params: any[]) {
            const client = _.isObject(params[0])?params[0]:new Client(params[0],params[1]);
            super("FundingIncrement",client);                
        }
    }
         
    export class HierarchicalRequirement extends ClassClientBase<Classes.HierarchicalRequirement> {
        constructor(apiKey: string, options: Api.ClientOptions)
        constructor(client: Client)
        constructor(...params: any[]) {
            const client = _.isObject(params[0])?params[0]:new Client(params[0],params[1]);
            super("HierarchicalRequirement",client);                
        }
    }
         
    export class HierarchicalRequirementPredecessorRelationship extends ClassClientBase<Classes.HierarchicalRequirementPredecessorRelationship> {
        constructor(apiKey: string, options: Api.ClientOptions)
        constructor(client: Client)
        constructor(...params: any[]) {
            const client = _.isObject(params[0])?params[0]:new Client(params[0],params[1]);
            super("HierarchicalRequirementPredecessorRelationship",client);                
        }
    }
         
    export class Initiative extends ClassClientBase<Classes.Initiative> {
        constructor(apiKey: string, options: Api.ClientOptions)
        constructor(client: Client)
        constructor(...params: any[]) {
            const client = _.isObject(params[0])?params[0]:new Client(params[0],params[1]);
            super("Initiative",client);                
        }
    }
         
    export class Iteration extends ClassClientBase<Classes.Iteration> {
        constructor(apiKey: string, options: Api.ClientOptions)
        constructor(client: Client)
        constructor(...params: any[]) {
            const client = _.isObject(params[0])?params[0]:new Client(params[0],params[1]);
            super("Iteration",client);                
        }
    }
         
    export class IterationCumulativeFlowData extends ClassClientBase<Classes.IterationCumulativeFlowData> {
        constructor(apiKey: string, options: Api.ClientOptions)
        constructor(client: Client)
        constructor(...params: any[]) {
            const client = _.isObject(params[0])?params[0]:new Client(params[0],params[1]);
            super("IterationCumulativeFlowData",client);                
        }
    }
         
    export class Milestone extends ClassClientBase<Classes.Milestone> {
        constructor(apiKey: string, options: Api.ClientOptions)
        constructor(client: Client)
        constructor(...params: any[]) {
            const client = _.isObject(params[0])?params[0]:new Client(params[0],params[1]);
            super("Milestone",client);                
        }
    }
         
    export class Panel extends ClassClientBase<Classes.Panel> {
        constructor(apiKey: string, options: Api.ClientOptions)
        constructor(client: Client)
        constructor(...params: any[]) {
            const client = _.isObject(params[0])?params[0]:new Client(params[0],params[1]);
            super("Panel",client);                
        }
    }
         
    export class PanelDefinitionConfigProperty extends ClassClientBase<Classes.PanelDefinitionConfigProperty> {
        constructor(apiKey: string, options: Api.ClientOptions)
        constructor(client: Client)
        constructor(...params: any[]) {
            const client = _.isObject(params[0])?params[0]:new Client(params[0],params[1]);
            super("PanelDefinitionConfigProperty",client);                
        }
    }
         
    export class PersistableObject extends ClassClientBase<Classes.PersistableObject> {
        constructor(apiKey: string, options: Api.ClientOptions)
        constructor(client: Client)
        constructor(...params: any[]) {
            const client = _.isObject(params[0])?params[0]:new Client(params[0],params[1]);
            super("PersistableObject",client);                
        }
    }
         
    export class PortfolioItem extends ClassClientBase<Classes.PortfolioItem> {
        constructor(apiKey: string, options: Api.ClientOptions)
        constructor(client: Client)
        constructor(...params: any[]) {
            const client = _.isObject(params[0])?params[0]:new Client(params[0],params[1]);
            super("PortfolioItem",client);                
        }
    }
         
    export class PortfolioItemPredecessorRelationship extends ClassClientBase<Classes.PortfolioItemPredecessorRelationship> {
        constructor(apiKey: string, options: Api.ClientOptions)
        constructor(client: Client)
        constructor(...params: any[]) {
            const client = _.isObject(params[0])?params[0]:new Client(params[0],params[1]);
            super("PortfolioItemPredecessorRelationship",client);                
        }
    }
         
    export class Preference extends ClassClientBase<Classes.Preference> {
        constructor(apiKey: string, options: Api.ClientOptions)
        constructor(client: Client)
        constructor(...params: any[]) {
            const client = _.isObject(params[0])?params[0]:new Client(params[0],params[1]);
            super("Preference",client);                
        }
    }
         
    export class PreliminaryEstimate extends ClassClientBase<Classes.PreliminaryEstimate> {
        constructor(apiKey: string, options: Api.ClientOptions)
        constructor(client: Client)
        constructor(...params: any[]) {
            const client = _.isObject(params[0])?params[0]:new Client(params[0],params[1]);
            super("PreliminaryEstimate",client);                
        }
    }
         
    export class ProfileImage extends ClassClientBase<Classes.ProfileImage> {
        constructor(apiKey: string, options: Api.ClientOptions)
        constructor(client: Client)
        constructor(...params: any[]) {
            const client = _.isObject(params[0])?params[0]:new Client(params[0],params[1]);
            super("ProfileImage",client);                
        }
    }
         
    export class Program extends ClassClientBase<Classes.Program> {
        constructor(apiKey: string, options: Api.ClientOptions)
        constructor(client: Client)
        constructor(...params: any[]) {
            const client = _.isObject(params[0])?params[0]:new Client(params[0],params[1]);
            super("Program",client);                
        }
    }
         
    export class Project extends ClassClientBase<Classes.Project> {
        constructor(apiKey: string, options: Api.ClientOptions)
        constructor(client: Client)
        constructor(...params: any[]) {
            const client = _.isObject(params[0])?params[0]:new Client(params[0],params[1]);
            super("Project",client);                
        }
    }
         
    export class ProjectPermission extends ClassClientBase<Classes.ProjectPermission> {
        constructor(apiKey: string, options: Api.ClientOptions)
        constructor(client: Client)
        constructor(...params: any[]) {
            const client = _.isObject(params[0])?params[0]:new Client(params[0],params[1]);
            super("ProjectPermission",client);                
        }
    }
         
    export class PullRequest extends ClassClientBase<Classes.PullRequest> {
        constructor(apiKey: string, options: Api.ClientOptions)
        constructor(client: Client)
        constructor(...params: any[]) {
            const client = _.isObject(params[0])?params[0]:new Client(params[0],params[1]);
            super("PullRequest",client);                
        }
    }
         
    export class RankableArtifact extends ClassClientBase<Classes.RankableArtifact> {
        constructor(apiKey: string, options: Api.ClientOptions)
        constructor(client: Client)
        constructor(...params: any[]) {
            const client = _.isObject(params[0])?params[0]:new Client(params[0],params[1]);
            super("RankableArtifact",client);                
        }
    }
         
    export class RecycleBinEntry extends ClassClientBase<Classes.RecycleBinEntry> {
        constructor(apiKey: string, options: Api.ClientOptions)
        constructor(client: Client)
        constructor(...params: any[]) {
            const client = _.isObject(params[0])?params[0]:new Client(params[0],params[1]);
            super("RecycleBinEntry",client);                
        }
    }
         
    export class Release extends ClassClientBase<Classes.Release> {
        constructor(apiKey: string, options: Api.ClientOptions)
        constructor(client: Client)
        constructor(...params: any[]) {
            const client = _.isObject(params[0])?params[0]:new Client(params[0],params[1]);
            super("Release",client);                
        }
    }
         
    export class ReleaseCumulativeFlowData extends ClassClientBase<Classes.ReleaseCumulativeFlowData> {
        constructor(apiKey: string, options: Api.ClientOptions)
        constructor(client: Client)
        constructor(...params: any[]) {
            const client = _.isObject(params[0])?params[0]:new Client(params[0],params[1]);
            super("ReleaseCumulativeFlowData",client);                
        }
    }
         
    export class Requirement extends ClassClientBase<Classes.Requirement> {
        constructor(apiKey: string, options: Api.ClientOptions)
        constructor(client: Client)
        constructor(...params: any[]) {
            const client = _.isObject(params[0])?params[0]:new Client(params[0],params[1]);
            super("Requirement",client);                
        }
    }
         
    export class Revision extends ClassClientBase<Classes.Revision> {
        constructor(apiKey: string, options: Api.ClientOptions)
        constructor(client: Client)
        constructor(...params: any[]) {
            const client = _.isObject(params[0])?params[0]:new Client(params[0],params[1]);
            super("Revision",client);                
        }
    }
         
    export class RevisionHistory extends ClassClientBase<Classes.RevisionHistory> {
        constructor(apiKey: string, options: Api.ClientOptions)
        constructor(client: Client)
        constructor(...params: any[]) {
            const client = _.isObject(params[0])?params[0]:new Client(params[0],params[1]);
            super("RevisionHistory",client);                
        }
    }
         
    export class SCMRepository extends ClassClientBase<Classes.SCMRepository> {
        constructor(apiKey: string, options: Api.ClientOptions)
        constructor(client: Client)
        constructor(...params: any[]) {
            const client = _.isObject(params[0])?params[0]:new Client(params[0],params[1]);
            super("SCMRepository",client);                
        }
    }
         
    export class SchedulableArtifact extends ClassClientBase<Classes.SchedulableArtifact> {
        constructor(apiKey: string, options: Api.ClientOptions)
        constructor(client: Client)
        constructor(...params: any[]) {
            const client = _.isObject(params[0])?params[0]:new Client(params[0],params[1]);
            super("SchedulableArtifact",client);                
        }
    }
         
    export class ScheduledTestCase extends ClassClientBase<Classes.ScheduledTestCase> {
        constructor(apiKey: string, options: Api.ClientOptions)
        constructor(client: Client)
        constructor(...params: any[]) {
            const client = _.isObject(params[0])?params[0]:new Client(params[0],params[1]);
            super("ScheduledTestCase",client);                
        }
    }
         
    export class Scope extends ClassClientBase<Classes.Scope> {
        constructor(apiKey: string, options: Api.ClientOptions)
        constructor(client: Client)
        constructor(...params: any[]) {
            const client = _.isObject(params[0])?params[0]:new Client(params[0],params[1]);
            super("Scope",client);                
        }
    }
         
    export class ScopedAttributeDefinition extends ClassClientBase<Classes.ScopedAttributeDefinition> {
        constructor(apiKey: string, options: Api.ClientOptions)
        constructor(client: Client)
        constructor(...params: any[]) {
            const client = _.isObject(params[0])?params[0]:new Client(params[0],params[1]);
            super("ScopedAttributeDefinition",client);                
        }
    }
         
    export class Slice extends ClassClientBase<Classes.Slice> {
        constructor(apiKey: string, options: Api.ClientOptions)
        constructor(client: Client)
        constructor(...params: any[]) {
            const client = _.isObject(params[0])?params[0]:new Client(params[0],params[1]);
            super("Slice",client);                
        }
    }
         
    export class State extends ClassClientBase<Classes.State> {
        constructor(apiKey: string, options: Api.ClientOptions)
        constructor(client: Client)
        constructor(...params: any[]) {
            const client = _.isObject(params[0])?params[0]:new Client(params[0],params[1]);
            super("State",client);                
        }
    }
         
    export class Subscription extends ClassClientBase<Classes.Subscription> {
        constructor(apiKey: string, options: Api.ClientOptions)
        constructor(client: Client)
        constructor(...params: any[]) {
            const client = _.isObject(params[0])?params[0]:new Client(params[0],params[1]);
            super("Subscription",client);                
        }
    }
         
    export class SubscriptionTag extends ClassClientBase<Classes.SubscriptionTag> {
        constructor(apiKey: string, options: Api.ClientOptions)
        constructor(client: Client)
        constructor(...params: any[]) {
            const client = _.isObject(params[0])?params[0]:new Client(params[0],params[1]);
            super("SubscriptionTag",client);                
        }
    }
         
    export class Tag extends ClassClientBase<Classes.Tag> {
        constructor(apiKey: string, options: Api.ClientOptions)
        constructor(client: Client)
        constructor(...params: any[]) {
            const client = _.isObject(params[0])?params[0]:new Client(params[0],params[1]);
            super("Tag",client);                
        }
    }
         
    export class Task extends ClassClientBase<Classes.Task> {
        constructor(apiKey: string, options: Api.ClientOptions)
        constructor(client: Client)
        constructor(...params: any[]) {
            const client = _.isObject(params[0])?params[0]:new Client(params[0],params[1]);
            super("Task",client);                
        }
    }
         
    export class TestCase extends ClassClientBase<Classes.TestCase> {
        constructor(apiKey: string, options: Api.ClientOptions)
        constructor(client: Client)
        constructor(...params: any[]) {
            const client = _.isObject(params[0])?params[0]:new Client(params[0],params[1]);
            super("TestCase",client);                
        }
    }
         
    export class TestCaseResult extends ClassClientBase<Classes.TestCaseResult> {
        constructor(apiKey: string, options: Api.ClientOptions)
        constructor(client: Client)
        constructor(...params: any[]) {
            const client = _.isObject(params[0])?params[0]:new Client(params[0],params[1]);
            super("TestCaseResult",client);                
        }
    }
         
    export class TestCaseStep extends ClassClientBase<Classes.TestCaseStep> {
        constructor(apiKey: string, options: Api.ClientOptions)
        constructor(client: Client)
        constructor(...params: any[]) {
            const client = _.isObject(params[0])?params[0]:new Client(params[0],params[1]);
            super("TestCaseStep",client);                
        }
    }
         
    export class TestFolder extends ClassClientBase<Classes.TestFolder> {
        constructor(apiKey: string, options: Api.ClientOptions)
        constructor(client: Client)
        constructor(...params: any[]) {
            const client = _.isObject(params[0])?params[0]:new Client(params[0],params[1]);
            super("TestFolder",client);                
        }
    }
         
    export class TestFolderStatus extends ClassClientBase<Classes.TestFolderStatus> {
        constructor(apiKey: string, options: Api.ClientOptions)
        constructor(client: Client)
        constructor(...params: any[]) {
            const client = _.isObject(params[0])?params[0]:new Client(params[0],params[1]);
            super("TestFolderStatus",client);                
        }
    }
         
    export class TestSet extends ClassClientBase<Classes.TestSet> {
        constructor(apiKey: string, options: Api.ClientOptions)
        constructor(client: Client)
        constructor(...params: any[]) {
            const client = _.isObject(params[0])?params[0]:new Client(params[0],params[1]);
            super("TestSet",client);                
        }
    }
         
    export class TimeEntryItem extends ClassClientBase<Classes.TimeEntryItem> {
        constructor(apiKey: string, options: Api.ClientOptions)
        constructor(client: Client)
        constructor(...params: any[]) {
            const client = _.isObject(params[0])?params[0]:new Client(params[0],params[1]);
            super("TimeEntryItem",client);                
        }
    }
         
    export class TimeEntryValue extends ClassClientBase<Classes.TimeEntryValue> {
        constructor(apiKey: string, options: Api.ClientOptions)
        constructor(client: Client)
        constructor(...params: any[]) {
            const client = _.isObject(params[0])?params[0]:new Client(params[0],params[1]);
            super("TimeEntryValue",client);                
        }
    }
         
    export class TypeDefinition extends ClassClientBase<Classes.TypeDefinition> {
        constructor(apiKey: string, options: Api.ClientOptions)
        constructor(client: Client)
        constructor(...params: any[]) {
            const client = _.isObject(params[0])?params[0]:new Client(params[0],params[1]);
            super("TypeDefinition",client);                
        }
    }
         
    export class User extends ClassClientBase<Classes.User> {
        constructor(apiKey: string, options: Api.ClientOptions)
        constructor(client: Client)
        constructor(...params: any[]) {
            const client = _.isObject(params[0])?params[0]:new Client(params[0],params[1]);
            super("User",client);                
        }
    }
         
    export class UserIterationCapacity extends ClassClientBase<Classes.UserIterationCapacity> {
        constructor(apiKey: string, options: Api.ClientOptions)
        constructor(client: Client)
        constructor(...params: any[]) {
            const client = _.isObject(params[0])?params[0]:new Client(params[0],params[1]);
            super("UserIterationCapacity",client);                
        }
    }
         
    export class UserPermission extends ClassClientBase<Classes.UserPermission> {
        constructor(apiKey: string, options: Api.ClientOptions)
        constructor(client: Client)
        constructor(...params: any[]) {
            const client = _.isObject(params[0])?params[0]:new Client(params[0],params[1]);
            super("UserPermission",client);                
        }
    }
         
    export class UserProfile extends ClassClientBase<Classes.UserProfile> {
        constructor(apiKey: string, options: Api.ClientOptions)
        constructor(client: Client)
        constructor(...params: any[]) {
            const client = _.isObject(params[0])?params[0]:new Client(params[0],params[1]);
            super("UserProfile",client);                
        }
    }
         
    export class WebLinkDefinition extends ClassClientBase<Classes.WebLinkDefinition> {
        constructor(apiKey: string, options: Api.ClientOptions)
        constructor(client: Client)
        constructor(...params: any[]) {
            const client = _.isObject(params[0])?params[0]:new Client(params[0],params[1]);
            super("WebLinkDefinition",client);                
        }
    }
         
    export class WebTab extends ClassClientBase<Classes.WebTab> {
        constructor(apiKey: string, options: Api.ClientOptions)
        constructor(client: Client)
        constructor(...params: any[]) {
            const client = _.isObject(params[0])?params[0]:new Client(params[0],params[1]);
            super("WebTab",client);                
        }
    }
         
    export class Workspace extends ClassClientBase<Classes.Workspace> {
        constructor(apiKey: string, options: Api.ClientOptions)
        constructor(client: Client)
        constructor(...params: any[]) {
            const client = _.isObject(params[0])?params[0]:new Client(params[0],params[1]);
            super("Workspace",client);                
        }
    }
         
    export class WorkspaceConfiguration extends ClassClientBase<Classes.WorkspaceConfiguration> {
        constructor(apiKey: string, options: Api.ClientOptions)
        constructor(client: Client)
        constructor(...params: any[]) {
            const client = _.isObject(params[0])?params[0]:new Client(params[0],params[1]);
            super("WorkspaceConfiguration",client);                
        }
    }
         
    export class WorkspaceDomainObject extends ClassClientBase<Classes.WorkspaceDomainObject> {
        constructor(apiKey: string, options: Api.ClientOptions)
        constructor(client: Client)
        constructor(...params: any[]) {
            const client = _.isObject(params[0])?params[0]:new Client(params[0],params[1]);
            super("WorkspaceDomainObject",client);                
        }
    }
         
    export class WorkspacePermission extends ClassClientBase<Classes.WorkspacePermission> {
        constructor(apiKey: string, options: Api.ClientOptions)
        constructor(client: Client)
        constructor(...params: any[]) {
            const client = _.isObject(params[0])?params[0]:new Client(params[0],params[1]);
            super("WorkspacePermission",client);                
        }
    }
        
    }